{"ast":null,"code":"import { neon, Pool } from '@neondatabase/serverless';\nconst sql = neon(process.env.REACT_APP_DATABASE_URL);\nconst pool = new Pool({\n  connectionString: process.env.REACT_APP_DATABASE_URL\n});\nexport const createExpense = async ({\n  description,\n  amount,\n  date,\n  organizationId,\n  paidByUserId,\n  splitWithUsers\n}) => {\n  try {\n    const query = `\n      INSERT INTO expenses (\n        description,\n        amount,\n        date,\n        organization_id,\n        paid_by_user_id,\n        split_with_users\n      )\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `;\n    const values = [description, amount, date, organizationId, paidByUserId, splitWithUsers];\n    const result = await sql.query(query, values);\n    return result.rows[0];\n  } catch (error) {\n    console.error('Error creating expense:', error);\n    throw error;\n  }\n};\nexport const getExpensesByOrganization = async organizationId => {\n  try {\n    const query = `\n      SELECT * FROM expenses\n      WHERE organization_id = $1\n      ORDER BY date DESC\n    `;\n    const result = await sql.query(query, [organizationId]);\n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching expenses:', error);\n    throw error;\n  }\n};\nexport const getExpensesByUser = async userId => {\n  try {\n    const query = `\n      SELECT * FROM expenses\n      WHERE paid_by_user_id = $1\n      OR $1 = ANY(split_with_users)\n      ORDER BY date DESC\n    `;\n    const result = await sql.query(query, [userId]);\n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching user expenses:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["neon","Pool","sql","process","env","REACT_APP_DATABASE_URL","pool","connectionString","createExpense","description","amount","date","organizationId","paidByUserId","splitWithUsers","query","values","result","rows","error","console","getExpensesByOrganization","getExpensesByUser","userId"],"sources":["C:/Users/shaur/OneDrive/Desktop/AiProject/my-react-app/src/db/database.js"],"sourcesContent":["import { neon, Pool } from '@neondatabase/serverless';\n\nconst sql = neon(process.env.REACT_APP_DATABASE_URL);\nconst pool = new Pool({ connectionString: process.env.REACT_APP_DATABASE_URL });\n\nexport const createExpense = async ({\n  description,\n  amount,\n  date,\n  organizationId,\n  paidByUserId,\n  splitWithUsers\n}) => {\n  try {\n    const query = `\n      INSERT INTO expenses (\n        description,\n        amount,\n        date,\n        organization_id,\n        paid_by_user_id,\n        split_with_users\n      )\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `;\n\n    const values = [\n      description,\n      amount,\n      date,\n      organizationId,\n      paidByUserId,\n      splitWithUsers\n    ];\n\n    const result = await sql.query(query, values);\n    return result.rows[0];\n  } catch (error) {\n    console.error('Error creating expense:', error);\n    throw error;\n  }\n};\n\nexport const getExpensesByOrganization = async (organizationId) => {\n  try {\n    const query = `\n      SELECT * FROM expenses\n      WHERE organization_id = $1\n      ORDER BY date DESC\n    `;\n\n    const result = await sql.query(query, [organizationId]);\n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching expenses:', error);\n    throw error;\n  }\n};\n\nexport const getExpensesByUser = async (userId) => {\n  try {\n    const query = `\n      SELECT * FROM expenses\n      WHERE paid_by_user_id = $1\n      OR $1 = ANY(split_with_users)\n      ORDER BY date DESC\n    `;\n\n    const result = await sql.query(query, [userId]);\n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching user expenses:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,SAASA,IAAI,EAAEC,IAAI,QAAQ,0BAA0B;AAErD,MAAMC,GAAG,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC;AACpD,MAAMC,IAAI,GAAG,IAAIL,IAAI,CAAC;EAAEM,gBAAgB,EAAEJ,OAAO,CAACC,GAAG,CAACC;AAAuB,CAAC,CAAC;AAE/E,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAAO;EAClCC,WAAW;EACXC,MAAM;EACNC,IAAI;EACJC,cAAc;EACdC,YAAY;EACZC;AACF,CAAC,KAAK;EACJ,IAAI;IACF,MAAMC,KAAK,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMC,MAAM,GAAG,CACbP,WAAW,EACXC,MAAM,EACNC,IAAI,EACJC,cAAc,EACdC,YAAY,EACZC,cAAc,CACf;IAED,MAAMG,MAAM,GAAG,MAAMf,GAAG,CAACa,KAAK,CAACA,KAAK,EAAEC,MAAM,CAAC;IAC7C,OAAOC,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,yBAAyB,GAAG,MAAOT,cAAc,IAAK;EACjE,IAAI;IACF,MAAMG,KAAK,GAAG;AAClB;AACA;AACA;AACA,KAAK;IAED,MAAME,MAAM,GAAG,MAAMf,GAAG,CAACa,KAAK,CAACA,KAAK,EAAE,CAACH,cAAc,CAAC,CAAC;IACvD,OAAOK,MAAM,CAACC,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAG,MAAOC,MAAM,IAAK;EACjD,IAAI;IACF,MAAMR,KAAK,GAAG;AAClB;AACA;AACA;AACA;AACA,KAAK;IAED,MAAME,MAAM,GAAG,MAAMf,GAAG,CAACa,KAAK,CAACA,KAAK,EAAE,CAACQ,MAAM,CAAC,CAAC;IAC/C,OAAON,MAAM,CAACC,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}