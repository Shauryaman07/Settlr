{"ast":null,"code":"import { neon, Pool } from '@neondatabase/serverless';\n\n// Check if database URL is provided\nif (!process.env.REACT_APP_DATABASE_URL) {\n  throw new Error('Database connection string not found. Please set REACT_APP_DATABASE_URL in your environment variables.');\n}\n\n// Initialize database connection\nconst sql = neon(process.env.REACT_APP_DATABASE_URL);\nconst pool = new Pool({\n  connectionString: process.env.REACT_APP_DATABASE_URL\n});\n\n// Test the connection\nconst testConnection = async () => {\n  try {\n    const result = await sql`SELECT 1`;\n    console.log('Database connection successful');\n    return true;\n  } catch (error) {\n    console.error('Database connection failed:', error);\n    return false;\n  }\n};\nexport const createExpense = async ({\n  description,\n  amount,\n  date,\n  organizationId,\n  paidByUserId,\n  splitWithUsers\n}) => {\n  try {\n    // Validate connection before proceeding\n    const isConnected = await testConnection();\n    if (!isConnected) {\n      throw new Error('Database connection failed');\n    }\n    const query = `\n      INSERT INTO expenses (\n        description,\n        amount,\n        date,\n        organization_id,\n        paid_by_user_id,\n        split_with_users\n      )\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `;\n    const values = [description, amount, date, organizationId, paidByUserId, splitWithUsers];\n    const result = await sql.query(query, values);\n    return result.rows[0];\n  } catch (error) {\n    console.error('Error creating expense:', error);\n    throw new Error(`Failed to create expense: ${error.message}`);\n  }\n};\nexport const getExpensesByOrganization = async organizationId => {\n  try {\n    // Validate connection before proceeding\n    const isConnected = await testConnection();\n    if (!isConnected) {\n      throw new Error('Database connection failed');\n    }\n    const query = `\n      SELECT * FROM expenses\n      WHERE organization_id = $1\n      ORDER BY date DESC\n    `;\n    const result = await sql.query(query, [organizationId]);\n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching expenses:', error);\n    throw new Error(`Failed to fetch expenses: ${error.message}`);\n  }\n};\nexport const getExpensesByUser = async userId => {\n  try {\n    // Validate connection before proceeding\n    const isConnected = await testConnection();\n    if (!isConnected) {\n      throw new Error('Database connection failed');\n    }\n    const query = `\n      SELECT * FROM expenses\n      WHERE paid_by_user_id = $1\n      OR $1 = ANY(split_with_users)\n      ORDER BY date DESC\n    `;\n    const result = await sql.query(query, [userId]);\n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching user expenses:', error);\n    throw new Error(`Failed to fetch user expenses: ${error.message}`);\n  }\n};\n\n// Export test connection function\nexport { testConnection };","map":{"version":3,"names":["neon","Pool","process","env","REACT_APP_DATABASE_URL","Error","sql","pool","connectionString","testConnection","result","console","log","error","createExpense","description","amount","date","organizationId","paidByUserId","splitWithUsers","isConnected","query","values","rows","message","getExpensesByOrganization","getExpensesByUser","userId"],"sources":["C:/Users/shaur/OneDrive/Desktop/AiProject/my-react-app/src/db/database.js"],"sourcesContent":["import { neon, Pool } from '@neondatabase/serverless';\n\n// Check if database URL is provided\nif (!process.env.REACT_APP_DATABASE_URL) {\n  throw new Error('Database connection string not found. Please set REACT_APP_DATABASE_URL in your environment variables.');\n}\n\n// Initialize database connection\nconst sql = neon(process.env.REACT_APP_DATABASE_URL);\nconst pool = new Pool({ connectionString: process.env.REACT_APP_DATABASE_URL });\n\n// Test the connection\nconst testConnection = async () => {\n  try {\n    const result = await sql`SELECT 1`;\n    console.log('Database connection successful');\n    return true;\n  } catch (error) {\n    console.error('Database connection failed:', error);\n    return false;\n  }\n};\n\nexport const createExpense = async ({\n  description,\n  amount,\n  date,\n  organizationId,\n  paidByUserId,\n  splitWithUsers\n}) => {\n  try {\n    // Validate connection before proceeding\n    const isConnected = await testConnection();\n    if (!isConnected) {\n      throw new Error('Database connection failed');\n    }\n\n    const query = `\n      INSERT INTO expenses (\n        description,\n        amount,\n        date,\n        organization_id,\n        paid_by_user_id,\n        split_with_users\n      )\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `;\n\n    const values = [\n      description,\n      amount,\n      date,\n      organizationId,\n      paidByUserId,\n      splitWithUsers\n    ];\n\n    const result = await sql.query(query, values);\n    return result.rows[0];\n  } catch (error) {\n    console.error('Error creating expense:', error);\n    throw new Error(`Failed to create expense: ${error.message}`);\n  }\n};\n\nexport const getExpensesByOrganization = async (organizationId) => {\n  try {\n    // Validate connection before proceeding\n    const isConnected = await testConnection();\n    if (!isConnected) {\n      throw new Error('Database connection failed');\n    }\n\n    const query = `\n      SELECT * FROM expenses\n      WHERE organization_id = $1\n      ORDER BY date DESC\n    `;\n\n    const result = await sql.query(query, [organizationId]);\n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching expenses:', error);\n    throw new Error(`Failed to fetch expenses: ${error.message}`);\n  }\n};\n\nexport const getExpensesByUser = async (userId) => {\n  try {\n    // Validate connection before proceeding\n    const isConnected = await testConnection();\n    if (!isConnected) {\n      throw new Error('Database connection failed');\n    }\n\n    const query = `\n      SELECT * FROM expenses\n      WHERE paid_by_user_id = $1\n      OR $1 = ANY(split_with_users)\n      ORDER BY date DESC\n    `;\n\n    const result = await sql.query(query, [userId]);\n    return result.rows;\n  } catch (error) {\n    console.error('Error fetching user expenses:', error);\n    throw new Error(`Failed to fetch user expenses: ${error.message}`);\n  }\n};\n\n// Export test connection function\nexport { testConnection };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}